LIB "origami.lib";

ring r = (real, 3), (pointA(1..2), pointB(1..2), pointC(1..2), pointD(1..2),Ex, Ey, pointE(1..2), pointG(1..2), pointF(1..2), pointI(1..2), pointH(1..2), pointA1(1..2), pointG1(1..2), pointI1(1..2), pointAp(1..2), lineAB(1..3), lineBC(1..3), lineCD(1..3), lineAD(1..3), lineAE(1..3), lineGF(1..3), lineIH(1..3), lineAG(1..3), lineAI(1..3), lineBF(1..3), lineGG1(1..3), lineII1(1..3), lineAA1(1..3), linek(1..3), lineAG1(1..3), lineAI1(1..3), lineG1I1(1..3), lineI1A1(1..3), lineA1Ap(1..3), lineIA1(1..3), lineG1A1(1..3), dG1A1, dG1I1, dI1A1, dAG1, dAI1, dAA1, dA1Ap, a, ni, p, p1, p2), Dp;
/*
proc SAS(vector P, vector Q, vector R, vector S, vector m, vector n, ideal G){
    poly g1 = dSquared(P, Q) - dSquared(Q, R);
    poly g2 = dSquared(S, P) - dSquared(S, R);
    poly g3 = perp(m, n);
    poly r1 = reduce(g1, G);
    poly r2 = reduce(g2, G);
    poly r3 = reduce(g3, G);
    r1;
    r2;
    r3;
    return(r1==0 && r2==0 && r3==0);
}

proc SSA(vector P, vector Q, vector R, vector S, vector m, vector n, ideal G){
    poly g1 = dSquared(P, Q) - dSquared(Q, R);
    poly g2 = dSquared(S, P) - dSquared(S, R);
    poly g3 = perp(m, n);
    poly r1 = reduce(g1, G);
    poly r2 = reduce(g2, G);
    poly r3 = reduce(g3, G);
    r1;
    r2;
    r3;
    return(r1==0 && r2==0 && r3==0);

}
*/


proc SSA(def da1, def da2, def db1, def db2, vector n, vector m, ideal G){
    poly r1 = reduce(da1 - da2, G);
    poly r2 = reduce(db1 - db2, G);
    poly r3 = reduce(perp(n, m), G);
    return(r1==0 && r2==0 && r3==0);
}

proc SAS(def da1, def da2, vector n, vector m, def db1, def db2, ideal G){
    poly r1 = reduce(da1 - da2, G);
    poly r2 = reduce(db1 - db2, G);
    poly r3 = reduce(perp(n, m), G);
    return(r1==0 && r2==0 && r3==0);
}
//defining points as vectors
vector A = makePoint(list(pointA(1..2)));
vector B = makePoint(list(pointB(1..2)));
vector C = makePoint(list(pointC(1..2)));
vector D = makePoint(list(pointD(1..2)));
vector E = makePoint(list(pointE(1..2)));
vector G = makePoint(list(pointG(1..2)));
vector F = makePoint(list(pointF(1..2)));
vector I = makePoint(list(pointI(1..2)));
vector H = makePoint(list(pointH(1..2)));
vector A1 = makePoint(list(pointA1(1..2)));
vector G1 = makePoint(list(pointG1(1..2)));
vector I1 = makePoint(list(pointI1(1..2)));
vector Ap = makePoint(list(pointAp(1..2)));

//defining lines as vectors
vector AB = makeLine(list(lineAB(1..3)));
vector BC = makeLine(list(lineBC(1..3)));
vector CD = makeLine(list(lineCD(1..3)));
vector AD = makeLine(list(lineAD(1..3)));
vector AE = makeLine(list(lineAE(1..3)));
vector GF = makeLine(list(lineGF(1..3)));
vector IH = makeLine(list(lineIH(1..3)));
vector AG = makeLine(list(lineAG(1..3)));
vector AI = makeLine(list(lineAI(1..3)));
vector BF = makeLine(list(lineBF(1..3)));
vector GG1 = makeLine(list(lineGG1(1..3)));
vector II1 = makeLine(list(lineII1(1..3)));
vector AA1 = makeLine(list(lineAA1(1..3)));
vector k = makeLine(list(linek(1..3)));
vector AG1 = makeLine(list(lineAG1(1..3)));
vector AI1 = makeLine(list(lineAI1(1..3)));
vector G1I1 = makeLine(list(lineG1I1(1..3)));
vector I1A1 = makeLine(list(lineI1A1(1..3)));
vector A1Ap = makeLine(list(lineA1Ap(1..3)));
vector IA1 = makeLine(list(lineIA1(1..3)));
vector G1A1 = makeLine(list(lineG1A1(1..3)));



//Square edges AB, BC, CD, AD
poly f1 = onLine(A, AB); //A belongs to AB
poly f2 = onLine(B, AB); //B belongs to AB
poly f3 = onLine(B, BC); //B belongs to BC
poly f4 = onLine(C, BC); //C belongs to BC
poly f5 = onLine(C, CD); //C belongs to CD
poly f6 = onLine(D, CD); //D belongs to CD
poly f7 = onLine(D, AD); //D belongs to AD
poly f8 = onLine(A, AD); //A belongs to AD
poly f9 = onLine([Ex, Ey], CD); //E belongs to CD
poly f10 = onLine([Ex, Ey], AE); //E belongs to AE
poly f11 = onLine(A, AE); //A belongs to AE

poly f12 = perp(AB, BC); //AB perpendicular to BC
poly f13 = perp(AB, AD); //AB perpendicular to AD
poly f14 = perp(CD, BC); //CD perpendicular to BC
poly f15 = perp(CD, AD); //CD perdendicular to AD

//A2
poly f16 = perp(AD, GF); //AD perpendicular to GF
poly f17 = perp(BC, GF); //BC perpendicular to GF
poly f18 = onLine(G, AD); //G belongs to AD
poly f19 = onLine(F, BC); //F belongs to BC
vector midpointADG = midpoint(G, A, D);
poly f20 = midpointADG[1];
poly f21 = midpointADG[2];  //G is midpoint AD
poly f22 = onLine(G, GF); //G belongs to GF
poly f23 = onLine(F, GF); //F belongs to GF
vector midpointBCF = midpoint(F, B, C);
poly f24 = midpointBCF[1]; //F is midpoint BC
poly f25 = midpointBCF[2];

//A2
poly f26 = perp(AD, IH); //IH perpendicular AD
poly f27 = perp(BC, IH); //IH perpendicular BC
vector midpointAGI = midpoint(I, A, G);
poly f28 = midpointAGI[1]; //I is midpoint AG
poly f29 = midpointAGI[2];
vector midpointBFH = midpoint(H, B, F);
poly f30 = midpointBFH[1]; //H is midpoint BF
poly f31 = midpointBFH[2];
poly f32 = onLine(I, IH); //I belongs to IH
poly f33 = onLine(H, IH); //H belongs to IH
poly f34 = onLine(I, AD); //I belongs to AD
poly f35 = onLine(H, BC); //H belongs to BC


//A6 A onto IH, G onto AE
poly f36 = onLine(A, AA1); //A belongs to AA1
poly f37 = onLine(A1, AA1); //A1 belongs to AA1
poly f38 = perp(k, AA1); //AA1 perpendicular to k
poly f39 = midPointOnLine(A, A1, k); //midpoint of AA1 belongs to k
poly f40 = onLine(A1, IH); //A1 belongs to IH

poly f41 = onLine(G, GG1); //G belongs to GG1
poly f42 = onLine(G1, GG1); //G1 belongs to GG1
poly f43 = perp(k, GG1); //GG1 perpendicular k
poly f44 = midPointOnLine(G, G1, k); //middlepoint of GG1 belongs to k
poly f45 = onLine(G1, AE); //G1  belongs to AE


//normalized 
poly f46 = normalized(AB); 
poly f47 = normalized(BC);
poly f48 = normalized(CD);
poly f49 = normalized(AD);
poly f50 = normalized(AE);
poly f51 = normalized(IH);
poly f52 = normalized(GF);
poly f53 = normalized(AA1);
poly f54 = normalized(GG1);
poly f55 = normalized(k);



//coordinates 
poly f56 = A[1];
poly f57 = A[2];
poly f58 = B[1] - a;
poly f59 = B[2];
poly f60 = C[1] - a;
poly f61 = C[2] - a;
poly f62 = D[1];
poly f63 = D[2] - a;
poly f64 = Ey - a;
poly f65 = a*ni-1;


poly f66 = onLine(A1, G1A1); // A1 belongs to G1A1
poly f67 = onLine(G1, G1A1); // G1 belongs to G1A1
poly f68 = onLine(A, AI1); //A belongs to AI1
poly f69 = onLine(I1, AI1); //I1 belongs to AI1
poly f70 = onLine(I1, G1A1); //I1  belongs to G1A1
vector midpointG1A1I1 = midpoint(I1, A1, G1); //I1 is midpoint to A1 and G1
poly f71 = midpointG1A1I1[1]; 
poly f72 = midpointG1A1I1[2];
poly f73 = onLine(A, AG1); //A belongs to AG1
poly f74 = onLine(G1, AG1); //G1 belongs to AG1
poly f75 = onLine(A, AI1); //A belongs to AI1
poly f76 = onLine(I1, AI1); //I1 belongs to AI1
poly f77 = onLine(A1, A1Ap); //A1 belongs to A1Ap
poly f78 = onLine([A1[1], 0], A1Ap); //Ap belongs to A1Ap
poly f79 = normalized(AG1); 
poly f80 = normalized(AI1);
poly f81 = normalized(A1Ap);
poly f82 = normalized(G1A1);
poly f83 = dG1I1^2 - (G1[1] - I1[1])^2 - (G1[2] - I1[2])^2;
poly f84 = dI1A1^2 - (I1[1] - A1[1])^2 - (I1[2] - A1[2])^2;
poly f85 = dAG1^2 - (A[1] - G1[1])^2 - (A[2] - G1[2])^2;
poly f86 = dAA1^2 - (A[1] - A1[1])^2 - (A[2] - A1[2])^2;
poly f87= dA1Ap^2 - (A1[1] - A1[1])^2 - (0 - A1[2])^2;


poly f88 = p1*I1[1] - 1;
poly f89 = p2*I1[2] - 1;

ideal Ideal = f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89; 

ideal Groebner = groebner(Ideal);
Groebner;
//poly g = perp(G1A1, AI1);
//poly rez = reduce(g, Groebner);
//poly rez1 = reduce((A1[1]-G1[1])*(I1[1]-A[1]) + (A1[2]-G1[2])*(I1[2] - A[2]), Groebner);


if(SAS(dG1I1, dI1A1, G1A1, AI1, dAI1, dAI1, Groebner) && SSA(dI1A1, dA1Ap, dAA1, dAA1, A1Ap, AB, Groebner)){
    printf("solves");
}else{
    printf("does not solve");
}

