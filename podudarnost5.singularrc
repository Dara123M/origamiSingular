LIB "origami.lib";


ring r = (real, Ex), (a, ni, pointA(1..2), pointB(1..2), pointC(1..2), pointD(1..2), Ey, pointG(1..2), pointF(1..2), pointI(1..2), pointH(1..2), pointA1(1..2), pointG1(1..2), pointI1(1..2), pointAp(1..2), pointAk(1..2), lineAB(1..3), lineBC(1..3), lineCD(1..3), lineAD(1..3), lineAE(1..3), lineGF(1..3), lineIH(1..3), lineAG(1..3), lineAI(1..3), lineBF(1..3), lineGG1(1..3), lineII1(1..3), lineAA1(1..3), linek(1..3), lineAG1(1..3), lineAI1(1..3), lineG1I1(1..3), lineI1A1(1..3), lineA1Ap(1..3), lineIA1(1..3), lineG1A1(1..3), lineAAk(1..3)), Dp;

proc congruent1(vector P, vector Q, vector R, vector S, vector l, ideal G){
    poly g1 = distancePoints(P, R) - distancePoints(Q, R);
    poly g2 = distancePoints(S, P) - distancePoints(S, Q);
    poly g3 = middlePoint(P, Q, l);
    poly g4 = -2*R[1] + Q[1] + P[1];  
    poly g5 = -2*R[2] + Q[2] + P[2];
    
    poly r1 = reduce(g1, G);
    poly r2 = reduce(g2, G);
    poly r3 = reduce(g3, G);
    poly r4 = reduce(g4, G);
    poly r5 = reduce(g5, G);
    
    return(r1==0 && r2==0 && r3==0 && r4==0 && r5==0);
    
}


proc congruent2(vector P, vector Q, vector R, vector S, vector T, vector l, ideal G){
    poly g1 = distancePoints(P, Q) - distancePoints(Q, R);
    poly g2 = distancePoints(S, P) - distancePoints(S, R);
    poly g3 = middlePoint(S, T, l);
    poly g4 = -2*R[1] + S[1] + T[1];  
    poly g5 = -2*R[2] + S[2] + T[2];
    

    
    poly r1 = reduce(g1, G);
    poly r2 = reduce(g2, G);
    poly r3 = reduce(g3, G);
    poly r4 = reduce(g4, G);
    poly r5 = reduce(g5, G);
    return(r1==0 && r2==0 && r3==0 && r4==0 && r5==0);
    
}
//defining points as vectors
vector A = makePoint(list(pointA(1..2)));
vector B = makePoint(list(pointB(1..2)));
vector C = makePoint(list(pointC(1..2)));
vector D = makePoint(list(pointD(1..2)));
vector G = makePoint(list(pointG(1..2)));
vector F = makePoint(list(pointF(1..2)));
vector I = makePoint(list(pointI(1..2)));
vector H = makePoint(list(pointH(1..2)));
vector A1 = makePoint(list(pointA1(1..2)));
vector G1 = makePoint(list(pointG1(1..2)));
vector I1 = makePoint(list(pointI1(1..2)));
vector Ap = makePoint(list(pointAp(1..2)));
vector Ak = makePoint(list(pointAk(1..2)));

//defining lines as vectors
vector AB = makeLine(list(lineAB(1..3)));
vector BC = makeLine(list(lineBC(1..3)));
vector CD = makeLine(list(lineCD(1..3)));
vector AD = makeLine(list(lineAD(1..3)));
vector AE = makeLine(list(lineAE(1..3)));
vector GF = makeLine(list(lineGF(1..3)));
vector IH = makeLine(list(lineIH(1..3)));
vector AG = makeLine(list(lineAG(1..3)));
vector AI = makeLine(list(lineAI(1..3)));
vector BF = makeLine(list(lineBF(1..3)));
vector GG1 = makeLine(list(lineGG1(1..3)));
vector II1 = makeLine(list(lineII1(1..3)));
vector AA1 = makeLine(list(lineAA1(1..3)));
vector k = makeLine(list(linek(1..3)));
vector AG1 = makeLine(list(lineAG1(1..3)));
vector AI1 = makeLine(list(lineAI1(1..3)));
vector G1I1 = makeLine(list(lineG1I1(1..3)));
vector I1A1 = makeLine(list(lineI1A1(1..3)));
vector A1Ap = makeLine(list(lineA1Ap(1..3)));
vector IA1 = makeLine(list(lineIA1(1..3)));
vector G1A1 = makeLine(list(lineG1A1(1..3)));
vector AAk = makeLine(list(lineAAk(1..3)));

//Square edges AB, BC, CD, AD
poly f1 = onLine(A, AB); //A belongs to AB
poly f2 = onLine(B, AB); //B belongs to AB
poly f3 = onLine(B, BC); //B belongs to BC
poly f4 = onLine(C, BC); //C belongs to BC
poly f5 = onLine(C, CD); //C belongs to CD
poly f6 = onLine(D, CD); //D belongs to CD
poly f7 = onLine(D, AD); //D belongs to AD
poly f8 = onLine(A, AD); //A belongs to AD
poly f9 = onLine([Ex, Ey], CD); //E belongs to CD
poly f10 = onLine([Ex, Ey], AE); //E belongs to AE
poly f11 = onLine(A, AE); //A belongs to AE

poly f12 = perpendicular(AB, BC); //AB perpendicular to BC
poly f13 = perpendicular(AB, AD); //AB perpendicular to AD
poly f14 = perpendicular(CD, BC); //CD perpendicular to BC
poly f15 = perpendicular(CD, AD); //CD perdendicular to AD
poly f16 = parallel(AB, CD); //AB parallel to CD
poly f17 = parallel(BC, AD); //BC parallel to AD

//A2
poly f18 = perpendicular(AD, GF); //AD perpendicular to GF
poly f19 = perpendicular(BC, GF); //BC perpendicular to GF
poly f20 = onLine(G, AD); //G belongs to AD
poly f21 = onLine(F, BC); //F belongs to BC
vector midpointADG = midpoint(G, A, D);
poly f22 = midpointADG[1];
poly f23 = midpointADG[2];  //G is midpoint AD
poly f24 = onLine(G, GF); //G belongs to GF
poly f25 = onLine(F, GF); //F belongs to GF
vector midpointBCF = midpoint(F, B, C);
poly f26 = midpointBCF[1]; //F is midpoint BC
poly f27 = midpointBCF[2];
poly f28 = parallel(AB, GF); //AB parallel to GF
poly f29 = parallel(CD, GF);
//A2
poly f30 = perpendicular(AD, IH); //IH perpendicular AD
poly f31 = perpendicular(BC, IH); //IH perpendicular BC
vector midpointAGI = midpoint(I, A, G);
poly f32 = midpointAGI[1]; //I is midpoint AG
poly f33 = midpointAGI[2];
vector midpointBFH = midpoint(H, B, F);
poly f34 = midpointBFH[1]; //H is midpoint BF
poly f35 = midpointBFH[2];
poly f36 = onLine(I, IH); //I belongs to IH
poly f37 = onLine(H, IH); //H belongs to IH
poly f38 = onLine(I, AD); //I belongs to AD
poly f39 = onLine(H, BC); //H belongs to BC
poly f40 = parallel(AB, IH); //AB parallel to IH
poly f41 = parallel(CD, IH);
poly f42 = parallel(GF, IH);

//A6 A onto IH, G onto AE
poly f43 = onLine(A, AA1); //A belongs to AA1
poly f44 = onLine(A1, AA1); //A1 belongs to AA1
poly f45 = perpendicular(k, AA1); //AA1 perdendicular to k
poly f46 = middlePoint(A, A1, k); //midpoint of AA1 belongs to k
poly f47 = onLine(A1, IH); //A1 belongs to IH

poly f48 = onLine(G, GG1); //G belongs to GG1
poly f49 = onLine(G1, GG1); //G1 belongs to GG1
poly f50 = perpendicular(k, GG1); //GG1 perpendicular k
poly f51 = middlePoint(G, G1, k); //middlepoint of GG1 belongs to k
poly f52 = onLine(G1, AE); //G1  belongs to AE


//normalized 
poly f53 = normalized(AB); 
poly f54 = normalized(BC);
poly f55 = normalized(CD);
poly f56 = normalized(AD);
poly f57 = normalized(AE);
poly f58 = normalized(IH);
poly f59 = normalized(GF);
poly f60 = normalized(AA1);
poly f61 = normalized(GG1);
poly f62 = normalized(k);
poly f63 = normalized(AG);
poly f64 = normalized(BF);


//coordinates 
poly f65 = A[1];
poly f66 = A[2];
poly f67 = B[1] - a;
poly f68 = B[2];
poly f69 = C[1] - a;
poly f70 = C[2] - a;
poly f71 = D[1];
poly f72 = D[2] - a;
poly f73 = Ey - a;
poly f74 = a*ni-1;


//A5
poly f75 = onLine(A1, G1A1); // A1 belongs to G1A1
poly f76 = onLine(G1, G1A1); // G1 belongs to G1A1
poly f77 = onLine(A, AI1); //A belongs to AI1
poly f78 = onLine(I1, AI1); //I1 belongs to AI1
poly f79 = onLine(I1, G1A1); //I1  belongs to G1A1
poly f80 = perpendicular(G1A1, AI1);//G1A1 perpendicular to AI1
poly f81 = normalized(G1A1); //normalize G1A1
poly f82 = normalized(AI1); //normalize AI1

poly f83 = onLine(A, AAk); //A1 belongs to AAk
poly f84 = onLine(Ak, AAk); //Ap belongs to AAk
poly f85 = onLine(A1, A1Ap); //A1 belongs to A1Ap
poly f86 = onLine([A1[1], 0], A1Ap); //Ap belongs to A1Ap
poly f87 = normalized(AAk);
poly f88 = normalized(A1Ap);
poly f89 = perpendicular(A1Ap, AAk);
poly f90 = middlePoint(A, Ak, A1Ap);
poly f91 = onLine(Ak, AB);
poly f92 = onLine([A1[1], 0], AAk);


poly gg4 = middlePoint(A, Ak, A1Ap);
poly gg5 = -2*A1[1] +A[1] + Ak[1];
poly gg6 = -2*0 + A[2] + Ak[2];


/*
poly g3 = distancePoints(list(A1(1..2)), list(A1(1), 0)) - distancePoints(list(I1(1..2)), list(A1(1..2)));
poly g4 = distancePoints(list(A(1..2)), list(A1(1), 0)) - distancePoints(list(A(1..2)), list(I1(1..2)));

poly g5 = perpendicular(list(AI1(1..3)), list(G1I1(1..3)));
poly g6 = perpendicular(list(A1Ap(1..3)), list(AB(1..3)));
*/


ideal Ideal = f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92; 

ideal Groebner = groebner(Ideal);

if(congruent1(G1, A1, I1, A, AI1, Groebner) && congruent2(I1, A1, [A1[1], 0], A, Ak, A1Ap, Groebner))
{
    printf("resava");
}
else{
    printf("ne resava");
}
